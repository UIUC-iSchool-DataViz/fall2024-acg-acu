{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "secret-viking",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "referenced-bracelet",
   "metadata": {},
   "outputs": [],
   "source": [
    "counties = pd.read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\",\n",
    "                       parse_dates = [\"date\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "reserved-james",
   "metadata": {},
   "outputs": [],
   "source": [
    "del counties[\"deaths\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "international-technology",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>county</th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-21</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Cook</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17031.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502827</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Sweetwater</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56037.0</td>\n",
       "      <td>11088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502828</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Teton</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56039.0</td>\n",
       "      <td>10074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502829</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Uinta</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56041.0</td>\n",
       "      <td>5643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502830</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Washakie</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56043.0</td>\n",
       "      <td>2358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502831</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Weston</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56045.0</td>\n",
       "      <td>1588</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2502832 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              date      county       state     fips  cases\n",
       "0       2020-01-21   Snohomish  Washington  53061.0      1\n",
       "1       2020-01-22   Snohomish  Washington  53061.0      1\n",
       "2       2020-01-23   Snohomish  Washington  53061.0      1\n",
       "3       2020-01-24        Cook    Illinois  17031.0      1\n",
       "4       2020-01-24   Snohomish  Washington  53061.0      1\n",
       "...            ...         ...         ...      ...    ...\n",
       "2502827 2022-05-13  Sweetwater     Wyoming  56037.0  11088\n",
       "2502828 2022-05-13       Teton     Wyoming  56039.0  10074\n",
       "2502829 2022-05-13       Uinta     Wyoming  56041.0   5643\n",
       "2502830 2022-05-13    Washakie     Wyoming  56043.0   2358\n",
       "2502831 2022-05-13      Weston     Wyoming  56045.0   1588\n",
       "\n",
       "[2502832 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "geological-trick",
   "metadata": {},
   "outputs": [],
   "source": [
    "states = pd.read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\",\n",
    "                       parse_dates = [\"date\"])\n",
    "del states[\"deaths\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "electronic-coordination",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>61942.000000</td>\n",
       "      <td>6.194200e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>32.247958</td>\n",
       "      <td>8.898301e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>18.788383</td>\n",
       "      <td>1.470231e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>7.078350e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>3.514960e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>1.043231e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>78.000000</td>\n",
       "      <td>1.216916e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               fips         cases\n",
       "count  61942.000000  6.194200e+04\n",
       "mean      32.247958  8.898301e+05\n",
       "std       18.788383  1.470231e+06\n",
       "min        1.000000  1.000000e+00\n",
       "25%       17.000000  7.078350e+04\n",
       "50%       31.000000  3.514960e+05\n",
       "75%       46.000000  1.043231e+06\n",
       "max       78.000000  1.216916e+07"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "creative-spotlight",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-21</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61937</th>\n",
       "      <td>2023-03-23</td>\n",
       "      <td>Virginia</td>\n",
       "      <td>51</td>\n",
       "      <td>2298300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61938</th>\n",
       "      <td>2023-03-23</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1940704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61939</th>\n",
       "      <td>2023-03-23</td>\n",
       "      <td>West Virginia</td>\n",
       "      <td>54</td>\n",
       "      <td>645710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61940</th>\n",
       "      <td>2023-03-23</td>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>55</td>\n",
       "      <td>2014524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61941</th>\n",
       "      <td>2023-03-23</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56</td>\n",
       "      <td>185800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61942 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            date          state  fips    cases\n",
       "0     2020-01-21     Washington    53        1\n",
       "1     2020-01-22     Washington    53        1\n",
       "2     2020-01-23     Washington    53        1\n",
       "3     2020-01-24       Illinois    17        1\n",
       "4     2020-01-24     Washington    53        1\n",
       "...          ...            ...   ...      ...\n",
       "61937 2023-03-23       Virginia    51  2298300\n",
       "61938 2023-03-23     Washington    53  1940704\n",
       "61939 2023-03-23  West Virginia    54   645710\n",
       "61940 2023-03-23      Wisconsin    55  2014524\n",
       "61941 2023-03-23        Wyoming    56   185800\n",
       "\n",
       "[61942 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "novel-capital",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date     datetime64[ns]\n",
       "state            object\n",
       "fips              int64\n",
       "cases             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "compatible-sheriff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date      datetime64[ns]\n",
       "county            object\n",
       "state             object\n",
       "fips             float64\n",
       "cases              int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counties.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "restricted-wheat",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-10-6b27f2aa86af>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  counties[\"fips\"] = counties[\"fips\"].astype(\"int64\")\n"
     ]
    }
   ],
   "source": [
    "counties = counties.dropna()\n",
    "counties[\"fips\"] = counties[\"fips\"].astype(\"int64\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "interim-comfort",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>county</th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-21</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Cook</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17031</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53061</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502827</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Sweetwater</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56037</td>\n",
       "      <td>11088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502828</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Teton</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56039</td>\n",
       "      <td>10074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502829</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Uinta</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56041</td>\n",
       "      <td>5643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502830</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Washakie</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56043</td>\n",
       "      <td>2358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2502831</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>Weston</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56045</td>\n",
       "      <td>1588</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2479154 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              date      county       state   fips  cases\n",
       "0       2020-01-21   Snohomish  Washington  53061      1\n",
       "1       2020-01-22   Snohomish  Washington  53061      1\n",
       "2       2020-01-23   Snohomish  Washington  53061      1\n",
       "3       2020-01-24        Cook    Illinois  17031      1\n",
       "4       2020-01-24   Snohomish  Washington  53061      1\n",
       "...            ...         ...         ...    ...    ...\n",
       "2502827 2022-05-13  Sweetwater     Wyoming  56037  11088\n",
       "2502828 2022-05-13       Teton     Wyoming  56039  10074\n",
       "2502829 2022-05-13       Uinta     Wyoming  56041   5643\n",
       "2502830 2022-05-13    Washakie     Wyoming  56043   2358\n",
       "2502831 2022-05-13      Weston     Wyoming  56045   1588\n",
       "\n",
       "[2479154 rows x 5 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "sapphire-future",
   "metadata": {},
   "outputs": [],
   "source": [
    "illinois_results = states[states[\"state\"] == \"Illinois\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "retired-microphone",
   "metadata": {},
   "outputs": [],
   "source": [
    "il_by_date = illinois_results.set_index(\"date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "useful-priest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-24</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-25</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-26</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-27</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-28</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>289683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-27</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>291271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-28</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>293169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-29</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>294673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-30</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>296935</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>251 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               state  fips   cases\n",
       "date                              \n",
       "2020-01-24  Illinois    17       1\n",
       "2020-01-25  Illinois    17       1\n",
       "2020-01-26  Illinois    17       1\n",
       "2020-01-27  Illinois    17       1\n",
       "2020-01-28  Illinois    17       1\n",
       "...              ...   ...     ...\n",
       "2020-09-26  Illinois    17  289683\n",
       "2020-09-27  Illinois    17  291271\n",
       "2020-09-28  Illinois    17  293169\n",
       "2020-09-29  Illinois    17  294673\n",
       "2020-09-30  Illinois    17  296935\n",
       "\n",
       "[251 rows x 3 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "il_by_date.loc[\"2020-01-01\":\"2020-09-30\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "brief-wilson",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib created a temporary config/cache directory at /tmp/matplotlib-cwz49ncd because the default path (/tmp/cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "joined-enhancement",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(\"cases\", data=il_by_date)\n",
    "plt.xticks(rotation=90);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "angry-diabetes",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "attached-scanning",
   "metadata": {},
   "outputs": [],
   "source": [
    "import bqplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "automatic-struggle",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "44e47916e7484a1ca19ea50d976c7e70",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(axes=[Axis(label='Date', scale=DateScale()), Axis(label='Cases (cumulative)', orientation='vertical', sâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_sc = bqplot.DateScale()\n",
    "y_sc = bqplot.LinearScale()\n",
    "\n",
    "x_ax = bqplot.Axis(scale = x_sc, label = \"Date\")\n",
    "y_ax = bqplot.Axis(scale = y_sc, label = \"Cases (cumulative)\", orientation = \"vertical\")\n",
    "\n",
    "lines = bqplot.Lines(x = il_by_date.index, y = il_by_date[\"cases\"], scales = {'x': x_sc, 'y': y_sc})\n",
    "fig = bqplot.Figure(marks = [lines], axes = [x_ax, y_ax])\n",
    "display(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "precise-receiver",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d07810437dc240fea340c3ecacc60fbc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(axes=[Axis(label='Date', scale=DateScale()), Axis(label='Cases (cumulative)', orientation='vertical', sâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_sc = bqplot.DateScale()\n",
    "y_sc = bqplot.LinearScale()\n",
    "\n",
    "x_ax = bqplot.Axis(scale = x_sc, label = \"Date\")\n",
    "y_ax = bqplot.Axis(scale = y_sc, label = \"Cases (cumulative)\", orientation = \"vertical\")\n",
    "\n",
    "lines = bqplot.Lines(x = il_by_date.index, y = il_by_date[\"cases\"], scales = {'x': x_sc, 'y': y_sc})\n",
    "\n",
    "date_selection = bqplot.interacts.FastIntervalSelector(scale = x_sc)\n",
    "\n",
    "fig = bqplot.Figure(marks = [lines], axes = [x_ax, y_ax], interaction = date_selection)\n",
    "display(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "smart-arrival",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "spare-plastic",
   "metadata": {},
   "outputs": [],
   "source": [
    "date_selection.selected = np.array(['2022-01-16', '2023-01-10'], dtype='datetime64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "relevant-twelve",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FastIntervalSelector(scale=DateScale(), selected=array(['2022-01-16', '2023-01-10'], dtype='datetime64[D]'))"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "faced-sentence",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ipywidgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "analyzed-missouri",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = ipywidgets.DatePicker()\n",
    "end = ipywidgets.DatePicker()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "competent-bracelet",
   "metadata": {},
   "outputs": [],
   "source": [
    "import traitlets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "atmospheric-atlantic",
   "metadata": {},
   "outputs": [],
   "source": [
    "def selection_changed(change):\n",
    "    start.value = pd.Timestamp(change['new'][0]).to_pydatetime()\n",
    "    end.value = pd.Timestamp(change['new'][1]).to_pydatetime()\n",
    "\n",
    "def picker_changed(change):\n",
    "    date_selection.selected = np.array([start.value, end.value], dtype='datetime64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "romance-carol",
   "metadata": {},
   "outputs": [],
   "source": [
    "start.observe(picker_changed, ['value'])\n",
    "end.observe(picker_changed, ['value'])\n",
    "date_selection.observe(selection_changed, ['selected'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "known-brush",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "87586de160b1412f934b050804bfff90",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HBox(children=(DatePicker(value=None), DatePicker(value=None))), Figure(axes=[Axis(label='Date'â€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ipywidgets.VBox([ipywidgets.HBox([start, end]), fig])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incredible-cargo",
   "metadata": {},
   "source": [
    "## Link the selection to the date pickers `start` and `end`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "mighty-history",
   "metadata": {},
   "outputs": [],
   "source": [
    "state_map = bqplot.topo_load(\"map_data/USStatesMap.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "gorgeous-entertainment",
   "metadata": {},
   "outputs": [],
   "source": [
    "cases_by_fips = states[states[\"date\"] == \"2022-04-01\"].groupby(\"fips\")[\"cases\"].max().to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "lined-effects",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8e1621def5f944d7a9604bc375fc6f2d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(axes=[ColorAxis(scale=ColorScale(scheme='BuPu'))], fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'riâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "proj = bqplot.AlbersUSA()\n",
    "color_sc = bqplot.ColorScale(scheme = \"BuPu\")\n",
    "color_ax = bqplot.ColorAxis(scale = color_sc)\n",
    "map_mark = bqplot.Map(\n",
    "    map_data = state_map,\n",
    "    scales = {'projection': proj, 'color': color_sc},\n",
    "    color = cases_by_fips\n",
    ")\n",
    "fig = bqplot.Figure(marks = [map_mark], axes = [color_ax])\n",
    "display(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "cultural-output",
   "metadata": {},
   "outputs": [],
   "source": [
    "label = ipywidgets.Label()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "incredible-advocate",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hover_over_state(mark, hover_info):\n",
    "    label.value = \"State %s had %s cases\" % (hover_info[\"data\"][\"name\"], hover_info[\"data\"][\"color\"])\n",
    "map_mark.on_hover(hover_over_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "ongoing-flash",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9c39086969c44a288bbbf765fa17b867",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Label(value='')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "psychological-terminology",
   "metadata": {},
   "outputs": [],
   "source": [
    "usa_cases_by_date = states.groupby(\"date\")[\"cases\"].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "exotic-chancellor",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b7afe07071bf4c599e60ce66908ff087",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(axes=[Axis(label='Date', scale=DateScale()), Axis(label='Cases (cumulative)', orientation='vertical', sâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_sc = bqplot.DateScale()\n",
    "y_sc = bqplot.LinearScale()\n",
    "\n",
    "x_ax = bqplot.Axis(scale = x_sc, label = \"Date\")\n",
    "y_ax = bqplot.Axis(scale = y_sc, label = \"Cases (cumulative)\", orientation = \"vertical\")\n",
    "\n",
    "lines = bqplot.Lines(x = usa_cases_by_date.index, y = usa_cases_by_date.values, scales = {'x': x_sc, 'y': y_sc})\n",
    "\n",
    "date_selection = bqplot.interacts.IndexSelector(scale = x_sc)\n",
    "\n",
    "fig1 = bqplot.Figure(marks = [lines], axes = [x_ax, y_ax], interaction = date_selection)\n",
    "display(fig1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "popular-operator",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2021-01-25T03:10:57.422'], dtype='datetime64[ms]')"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_selection.selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "negative-enough",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "about-serbia",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18054</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>443009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18055</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>2</td>\n",
       "      <td>53061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18056</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>4</td>\n",
       "      <td>728231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18057</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Arkansas</td>\n",
       "      <td>5</td>\n",
       "      <td>284702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18058</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>California</td>\n",
       "      <td>6</td>\n",
       "      <td>3212939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18059</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Colorado</td>\n",
       "      <td>8</td>\n",
       "      <td>389227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18060</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Connecticut</td>\n",
       "      <td>9</td>\n",
       "      <td>243632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18061</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Delaware</td>\n",
       "      <td>10</td>\n",
       "      <td>75191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18062</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>11</td>\n",
       "      <td>35505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18063</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Florida</td>\n",
       "      <td>12</td>\n",
       "      <td>1658161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18064</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>13</td>\n",
       "      <td>847036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18065</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Guam</td>\n",
       "      <td>66</td>\n",
       "      <td>8523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18066</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Hawaii</td>\n",
       "      <td>15</td>\n",
       "      <td>25209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18067</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Idaho</td>\n",
       "      <td>16</td>\n",
       "      <td>160182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18068</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1107388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18069</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Indiana</td>\n",
       "      <td>18</td>\n",
       "      <td>616310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18070</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Iowa</td>\n",
       "      <td>19</td>\n",
       "      <td>313907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18071</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Kansas</td>\n",
       "      <td>20</td>\n",
       "      <td>272220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18072</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Kentucky</td>\n",
       "      <td>21</td>\n",
       "      <td>351462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18073</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Louisiana</td>\n",
       "      <td>22</td>\n",
       "      <td>385942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18074</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Maine</td>\n",
       "      <td>23</td>\n",
       "      <td>37046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18075</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Maryland</td>\n",
       "      <td>24</td>\n",
       "      <td>343353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18076</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>25</td>\n",
       "      <td>503688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18077</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>26</td>\n",
       "      <td>597781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18078</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Minnesota</td>\n",
       "      <td>27</td>\n",
       "      <td>455851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18079</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Mississippi</td>\n",
       "      <td>28</td>\n",
       "      <td>265146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18080</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>29</td>\n",
       "      <td>489865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18081</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Montana</td>\n",
       "      <td>30</td>\n",
       "      <td>91905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18082</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Nebraska</td>\n",
       "      <td>31</td>\n",
       "      <td>188850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18083</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>32</td>\n",
       "      <td>272006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18084</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>New Hampshire</td>\n",
       "      <td>33</td>\n",
       "      <td>62768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18085</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>New Jersey</td>\n",
       "      <td>34</td>\n",
       "      <td>666951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18086</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>35</td>\n",
       "      <td>169696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18087</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>New York</td>\n",
       "      <td>36</td>\n",
       "      <td>1347924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18088</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>North Carolina</td>\n",
       "      <td>37</td>\n",
       "      <td>724154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18089</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>North Dakota</td>\n",
       "      <td>38</td>\n",
       "      <td>96899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18090</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Northern Mariana Islands</td>\n",
       "      <td>69</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18091</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>39</td>\n",
       "      <td>868656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18092</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>40</td>\n",
       "      <td>374853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18093</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>41</td>\n",
       "      <td>138587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18094</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>42</td>\n",
       "      <td>813665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18095</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Puerto Rico</td>\n",
       "      <td>72</td>\n",
       "      <td>125211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18096</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>44</td>\n",
       "      <td>111754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18097</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>South Carolina</td>\n",
       "      <td>45</td>\n",
       "      <td>421417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18098</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>South Dakota</td>\n",
       "      <td>46</td>\n",
       "      <td>107180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18099</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Tennessee</td>\n",
       "      <td>47</td>\n",
       "      <td>695935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18100</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Texas</td>\n",
       "      <td>48</td>\n",
       "      <td>2268260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18101</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Utah</td>\n",
       "      <td>49</td>\n",
       "      <td>337269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18102</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Vermont</td>\n",
       "      <td>50</td>\n",
       "      <td>11165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18103</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Virgin Islands</td>\n",
       "      <td>78</td>\n",
       "      <td>2350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18104</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Virginia</td>\n",
       "      <td>51</td>\n",
       "      <td>478619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18105</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>306489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18106</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>West Virginia</td>\n",
       "      <td>54</td>\n",
       "      <td>115839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18107</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>55</td>\n",
       "      <td>582477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18108</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>56</td>\n",
       "      <td>51062</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            date                     state  fips    cases\n",
       "18054 2021-01-25                   Alabama     1   443009\n",
       "18055 2021-01-25                    Alaska     2    53061\n",
       "18056 2021-01-25                   Arizona     4   728231\n",
       "18057 2021-01-25                  Arkansas     5   284702\n",
       "18058 2021-01-25                California     6  3212939\n",
       "18059 2021-01-25                  Colorado     8   389227\n",
       "18060 2021-01-25               Connecticut     9   243632\n",
       "18061 2021-01-25                  Delaware    10    75191\n",
       "18062 2021-01-25      District of Columbia    11    35505\n",
       "18063 2021-01-25                   Florida    12  1658161\n",
       "18064 2021-01-25                   Georgia    13   847036\n",
       "18065 2021-01-25                      Guam    66     8523\n",
       "18066 2021-01-25                    Hawaii    15    25209\n",
       "18067 2021-01-25                     Idaho    16   160182\n",
       "18068 2021-01-25                  Illinois    17  1107388\n",
       "18069 2021-01-25                   Indiana    18   616310\n",
       "18070 2021-01-25                      Iowa    19   313907\n",
       "18071 2021-01-25                    Kansas    20   272220\n",
       "18072 2021-01-25                  Kentucky    21   351462\n",
       "18073 2021-01-25                 Louisiana    22   385942\n",
       "18074 2021-01-25                     Maine    23    37046\n",
       "18075 2021-01-25                  Maryland    24   343353\n",
       "18076 2021-01-25             Massachusetts    25   503688\n",
       "18077 2021-01-25                  Michigan    26   597781\n",
       "18078 2021-01-25                 Minnesota    27   455851\n",
       "18079 2021-01-25               Mississippi    28   265146\n",
       "18080 2021-01-25                  Missouri    29   489865\n",
       "18081 2021-01-25                   Montana    30    91905\n",
       "18082 2021-01-25                  Nebraska    31   188850\n",
       "18083 2021-01-25                    Nevada    32   272006\n",
       "18084 2021-01-25             New Hampshire    33    62768\n",
       "18085 2021-01-25                New Jersey    34   666951\n",
       "18086 2021-01-25                New Mexico    35   169696\n",
       "18087 2021-01-25                  New York    36  1347924\n",
       "18088 2021-01-25            North Carolina    37   724154\n",
       "18089 2021-01-25              North Dakota    38    96899\n",
       "18090 2021-01-25  Northern Mariana Islands    69      129\n",
       "18091 2021-01-25                      Ohio    39   868656\n",
       "18092 2021-01-25                  Oklahoma    40   374853\n",
       "18093 2021-01-25                    Oregon    41   138587\n",
       "18094 2021-01-25              Pennsylvania    42   813665\n",
       "18095 2021-01-25               Puerto Rico    72   125211\n",
       "18096 2021-01-25              Rhode Island    44   111754\n",
       "18097 2021-01-25            South Carolina    45   421417\n",
       "18098 2021-01-25              South Dakota    46   107180\n",
       "18099 2021-01-25                 Tennessee    47   695935\n",
       "18100 2021-01-25                     Texas    48  2268260\n",
       "18101 2021-01-25                      Utah    49   337269\n",
       "18102 2021-01-25                   Vermont    50    11165\n",
       "18103 2021-01-25            Virgin Islands    78     2350\n",
       "18104 2021-01-25                  Virginia    51   478619\n",
       "18105 2021-01-25                Washington    53   306489\n",
       "18106 2021-01-25             West Virginia    54   115839\n",
       "18107 2021-01-25                 Wisconsin    55   582477\n",
       "18108 2021-01-25                   Wyoming    56    51062"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states[states[\"date\"] == pd.to_datetime(date_selection.selected).round(\"1d\")[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "sticky-collapse",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "98141a2033964b7e9f197453a17a2f77",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(axes=[ColorAxis(scale=ColorScale(scheme='BuPu'))], fig_margin={'top': 60, 'bottom': 60, 'left': 60, 'riâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "proj = bqplot.AlbersUSA()\n",
    "color_sc = bqplot.ColorScale(scheme = \"BuPu\")\n",
    "color_ax = bqplot.ColorAxis(scale = color_sc)\n",
    "\n",
    "use_cases_by_date = states[states[\"date\"] == pd.to_datetime(date_selection.selected).round(\"1d\")[0]].groupby(\"fips\")[\"cases\"].sum().to_dict()\n",
    "map_mark = bqplot.Map(\n",
    "    map_data = state_map,\n",
    "    scales = {'projection': proj, 'color': color_sc},\n",
    "    color = use_cases_by_date\n",
    ")\n",
    "fig2 = bqplot.Figure(marks = [map_mark], axes = [color_ax])\n",
    "display(fig2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "demonstrated-johnston",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_cases(change):\n",
    "    use_cases_by_date = states[states[\"date\"] == pd.to_datetime(date_selection.selected).round(\"1d\")[0]].groupby(\"fips\")[\"cases\"].sum().to_dict()\n",
    "    map_mark.color = use_cases_by_date\n",
    "\n",
    "date_selection.unobserve_all()\n",
    "date_selection.observe(update_cases, ['selected'])    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "welcome-palestine",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e13e3acaa35141bb9adcc341e9f67c45",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(Figure(axes=[Axis(label='Date', scale=DateScale(), side='bottom'), Axis(label='Cases (cumulativâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ipywidgets.VBox([fig1, fig2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "arabic-increase",
   "metadata": {},
   "outputs": [],
   "source": [
    "color_sc.min = 0\n",
    "color_sc.max = states.groupby(\"state\")[\"cases\"].max().max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "disturbed-richardson",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
